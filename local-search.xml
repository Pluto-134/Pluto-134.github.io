<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GPG</title>
    <link href="/2023/08/10/gpg/"/>
    <url>/2023/08/10/gpg/</url>
    
    <content type="html"><![CDATA[<h1 id="gpg相关指令"><a href="#gpg相关指令" class="headerlink" title="gpg相关指令"></a>gpg相关指令</h1><p>查看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --version  // 查看gpg版本<br>gpg --<span class="hljs-built_in">help</span> // 查看帮助<br></code></pre></td></tr></table></figure><p>生成密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --gen-key // 用默认参数生成密钥对<br>gpg --full-generate-key // 生成密钥对(列出所有可选项)<br>gpg -a --gen-revoke [用户ID] &gt; gpg_revoke.rev // 生成撤销证书<br></code></pre></td></tr></table></figure><p>列出密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --list-secret-keys --keyid-format LONG // 列出密钥 包含keyid<br>gpg -a --<span class="hljs-built_in">export</span> [用户ID] &gt; gpg_public.pub // 导出公钥 -a表示-armor,以ASCII码输出(默认以二进制输出)<br>gpg -a --export-secret-key [用户ID] &gt; gpg_secret.sec // 导出私钥<br>gpg --import .key // 导入公钥或私钥<br></code></pre></td></tr></table></figure><p>发布密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --keyserver pool.sks-keyservers.net --send-keys [用户ID] // 发布密钥<br>gpg --keyserver pool.sks-keyservers.net --recv-keys [用户ID] // 获取密钥<br></code></pre></td></tr></table></figure><p>吊销密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --import gpg_revoke.rev // 吊销密钥<br>gpg --keyserver pool.sks-keyservers.net --send-keys [用户ID] // 更新吊销信息<br></code></pre></td></tr></table></figure><p>删除密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --delete-keys keyid // 删除公钥<br>gpg --delete-secret-keys // 删除私钥<br></code></pre></td></tr></table></figure><h1 id="gpg使用"><a href="#gpg使用" class="headerlink" title="gpg使用"></a>gpg使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg -e -r [接收者ID] -o [输出文件] [待加密文件] // 加密 -r表示recipient -e表示encrypt <br>gpg -d -u [用户ID] -o [输出文件] [加密文件] // 解密 -d表示decrypt<br>gpg -u [用户ID] -s [待签名文件] // 签名<br>gpg -u [用户ID] -r [接收者ID] -se [待签名加密文件]  // 签名加密同时进行<br>gpg --verify [待验证文件] // 验证签名<br></code></pre></td></tr></table></figure><h1 id="git中使用gpg"><a href="#git中使用gpg" class="headerlink" title="git中使用gpg"></a>git中使用gpg</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --list-secret-keys --keyid-format=long // 列出密钥<br>git config --global user.signingkey [主键ID] // 设置git使用的gpg密钥 主键ID即为上述命令列出的sec rsa4096/后的内容<br>git config --global commit.gpgsign <span class="hljs-literal">true</span> // 设置git提交时自动签名<br></code></pre></td></tr></table></figure><h1 id="利用-GPG-私钥对-Git-commit-进行签名"><a href="#利用-GPG-私钥对-Git-commit-进行签名" class="headerlink" title="利用 GPG 私钥对 Git commit 进行签名"></a>利用 GPG 私钥对 Git commit 进行签名</h1><p>首先，需要让 Git 知道签名所用的 GPG 密钥 ID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.signingkey &#123;key_id&#125;<br></code></pre></td></tr></table></figure><p>然后，在每次 commit 的时候，加上<code>-S</code>参数，表示这次提交需要用 GPG 密钥进行签名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -S -m <span class="hljs-string">&quot;...&quot;</span><br></code></pre></td></tr></table></figure><p>如果觉得每次都需要手动加上<code>-S</code>有些麻烦，可以设置 Git 为每次 commit 自动要求签名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global commit.gpgsign <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>但不论是否需要手动加上<code>-S</code>，在 commit 时皆会弹出对话框，需要输入该密钥的密码，以确保是密钥拥有者本人操作<br>输入正确密码后，本次 commit 便被签名验证，push 到 Github 远程仓库后，即可显示出 Verified 绿色标记</p><h1 id="贴一些参考"><a href="#贴一些参考" class="headerlink" title="贴一些参考"></a>贴一些参考</h1><p><a href="http://ruanyifeng.com/blog/2013/07/gpg.html">http://ruanyifeng.com/blog/2013/07/gpg.html</a><br><a href="https://yexun1995.github.io/2020/09/15/GPG/">https://yexun1995.github.io/2020/09/15/GPG/</a><br><a href="https://blog.ginshio.org/2020/gpg_started_guide/">https://blog.ginshio.org/2020/gpg_started_guide/</a></p>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2023/08/09/git/"/>
    <url>/2023/08/09/git/</url>
    
    <content type="html"><![CDATA[<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p><span id="more"></span><h1 id="git-基本用法"><a href="#git-基本用法" class="headerlink" title="git 基本用法"></a>git 基本用法</h1><ul><li>进入要管理的文件夹</li><li>执行初始化命令<br><code>git init</code></li><li>管理目录下的文件状态<br><code>git status</code><br>注：新增的文件和修改过后的文件都是红色</li><li>管理指定文件（红变绿）<br><code>git add 文件名</code><br><code>git add .</code><br><code>git add -a</code><br><code>git add --all</code></li><li>个人信息配置：用户名、邮箱【一次即可】<br><code>git config --global user.email &quot;Your email&quot;</code><br><code>git config --global user.name &quot;Your Name&quot;</code></li><li>生成版本<br><code>git commit -m &#39;描述信息&#39;</code></li><li>查看版本记录<br><code>git log</code></li></ul><h1 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">//报错信息 <br>//error: pathspec <span class="hljs-string">&#x27;XXX&#x27;</span> did not match any file(s) known to git<br><br>git branch //查看本地分支<br>git branch -a //查看所有分支<br>git fetch //获取远程分支<br>git checkout -b &lt;branch_name&gt; origin/&lt;branch_name&gt; //创建本地分支<br>git branch -d &lt;branch_name&gt; //删除本地分支<br><br>git <span class="hljs-built_in">clone</span> &lt;url&gt; //克隆项目<br>git <span class="hljs-built_in">clone</span> -b &lt;branch_name&gt; &lt;url&gt; //克隆指定分支的项目<br><br>git merge //合并分支<br>git merge &lt;branch_name&gt; //合并分支<br></code></pre></td></tr></table></figure><h3 id="Uncommitted-changes"><a href="#Uncommitted-changes" class="headerlink" title="Uncommitted changes"></a>Uncommitted changes</h3><p>Uncommitted changes, however (even staged), will be lost. Make sure to stash and commit anything you need. For that you can run the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git stash<br></code></pre></td></tr></table></figure><p>And then to reapply these uncommitted changes:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git stash pop<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
